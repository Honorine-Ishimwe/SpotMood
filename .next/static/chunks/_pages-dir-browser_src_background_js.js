/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_src_background_js"],{

/***/ "(pages-dir-browser)/./node_modules/delaunay-fast/delaunay.js":
/*!************************************************!*\
  !*** ./node_modules/delaunay-fast/delaunay.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var Delaunay;\n\n(function() {\n  \"use strict\";\n\n  var EPSILON = 1.0 / 1048576.0;\n\n  function supertriangle(vertices) {\n    var xmin = Number.POSITIVE_INFINITY,\n        ymin = Number.POSITIVE_INFINITY,\n        xmax = Number.NEGATIVE_INFINITY,\n        ymax = Number.NEGATIVE_INFINITY,\n        i, dx, dy, dmax, xmid, ymid;\n\n    for(i = vertices.length; i--; ) {\n      if(vertices[i][0] < xmin) xmin = vertices[i][0];\n      if(vertices[i][0] > xmax) xmax = vertices[i][0];\n      if(vertices[i][1] < ymin) ymin = vertices[i][1];\n      if(vertices[i][1] > ymax) ymax = vertices[i][1];\n    }\n\n    dx = xmax - xmin;\n    dy = ymax - ymin;\n    dmax = Math.max(dx, dy);\n    xmid = xmin + dx * 0.5;\n    ymid = ymin + dy * 0.5;\n\n    return [\n      [xmid - 20 * dmax, ymid -      dmax],\n      [xmid            , ymid + 20 * dmax],\n      [xmid + 20 * dmax, ymid -      dmax]\n    ];\n  }\n\n  function circumcircle(vertices, i, j, k) {\n    var x1 = vertices[i][0],\n        y1 = vertices[i][1],\n        x2 = vertices[j][0],\n        y2 = vertices[j][1],\n        x3 = vertices[k][0],\n        y3 = vertices[k][1],\n        fabsy1y2 = Math.abs(y1 - y2),\n        fabsy2y3 = Math.abs(y2 - y3),\n        xc, yc, m1, m2, mx1, mx2, my1, my2, dx, dy;\n\n    /* Check for coincident points */\n    if(fabsy1y2 < EPSILON && fabsy2y3 < EPSILON)\n      throw new Error(\"Eek! Coincident points!\");\n\n    if(fabsy1y2 < EPSILON) {\n      m2  = -((x3 - x2) / (y3 - y2));\n      mx2 = (x2 + x3) / 2.0;\n      my2 = (y2 + y3) / 2.0;\n      xc  = (x2 + x1) / 2.0;\n      yc  = m2 * (xc - mx2) + my2;\n    }\n\n    else if(fabsy2y3 < EPSILON) {\n      m1  = -((x2 - x1) / (y2 - y1));\n      mx1 = (x1 + x2) / 2.0;\n      my1 = (y1 + y2) / 2.0;\n      xc  = (x3 + x2) / 2.0;\n      yc  = m1 * (xc - mx1) + my1;\n    }\n\n    else {\n      m1  = -((x2 - x1) / (y2 - y1));\n      m2  = -((x3 - x2) / (y3 - y2));\n      mx1 = (x1 + x2) / 2.0;\n      mx2 = (x2 + x3) / 2.0;\n      my1 = (y1 + y2) / 2.0;\n      my2 = (y2 + y3) / 2.0;\n      xc  = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);\n      yc  = (fabsy1y2 > fabsy2y3) ?\n        m1 * (xc - mx1) + my1 :\n        m2 * (xc - mx2) + my2;\n    }\n\n    dx = x2 - xc;\n    dy = y2 - yc;\n    return {i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy};\n  }\n\n  function dedup(edges) {\n    var i, j, a, b, m, n;\n\n    for(j = edges.length; j; ) {\n      b = edges[--j];\n      a = edges[--j];\n\n      for(i = j; i; ) {\n        n = edges[--i];\n        m = edges[--i];\n\n        if((a === m && b === n) || (a === n && b === m)) {\n          edges.splice(j, 2);\n          edges.splice(i, 2);\n          break;\n        }\n      }\n    }\n  }\n\n  Delaunay = {\n    triangulate: function(vertices, key) {\n      var n = vertices.length,\n          i, j, indices, st, open, closed, edges, dx, dy, a, b, c;\n\n      /* Bail if there aren't enough vertices to form any triangles. */\n      if(n < 3)\n        return [];\n\n      /* Slice out the actual vertices from the passed objects. (Duplicate the\n       * array even if we don't, though, since we need to make a supertriangle\n       * later on!) */\n      vertices = vertices.slice(0);\n\n      if(key)\n        for(i = n; i--; )\n          vertices[i] = vertices[i][key];\n\n      /* Make an array of indices into the vertex array, sorted by the\n       * vertices' x-position. */\n      indices = new Array(n);\n\n      for(i = n; i--; )\n        indices[i] = i;\n\n      indices.sort(function(i, j) {\n        return vertices[j][0] - vertices[i][0];\n      });\n\n      /* Next, find the vertices of the supertriangle (which contains all other\n       * triangles), and append them onto the end of a (copy of) the vertex\n       * array. */\n      st = supertriangle(vertices);\n      vertices.push(st[0], st[1], st[2]);\n      \n      /* Initialize the open list (containing the supertriangle and nothing\n       * else) and the closed list (which is empty since we havn't processed\n       * any triangles yet). */\n      open   = [circumcircle(vertices, n + 0, n + 1, n + 2)];\n      closed = [];\n      edges  = [];\n\n      /* Incrementally add each vertex to the mesh. */\n      for(i = indices.length; i--; edges.length = 0) {\n        c = indices[i];\n\n        /* For each open triangle, check to see if the current point is\n         * inside it's circumcircle. If it is, remove the triangle and add\n         * it's edges to an edge list. */\n        for(j = open.length; j--; ) {\n          /* If this point is to the right of this triangle's circumcircle,\n           * then this triangle should never get checked again. Remove it\n           * from the open list, add it to the closed list, and skip. */\n          dx = vertices[c][0] - open[j].x;\n          if(dx > 0.0 && dx * dx > open[j].r) {\n            closed.push(open[j]);\n            open.splice(j, 1);\n            continue;\n          }\n\n          /* If we're outside the circumcircle, skip this triangle. */\n          dy = vertices[c][1] - open[j].y;\n          if(dx * dx + dy * dy - open[j].r > EPSILON)\n            continue;\n\n          /* Remove the triangle and add it's edges to the edge list. */\n          edges.push(\n            open[j].i, open[j].j,\n            open[j].j, open[j].k,\n            open[j].k, open[j].i\n          );\n          open.splice(j, 1);\n        }\n\n        /* Remove any doubled edges. */\n        dedup(edges);\n\n        /* Add a new triangle for each edge. */\n        for(j = edges.length; j; ) {\n          b = edges[--j];\n          a = edges[--j];\n          open.push(circumcircle(vertices, a, b, c));\n        }\n      }\n\n      /* Copy any remaining open triangles to the closed list, and then\n       * remove any triangles that share a vertex with the supertriangle,\n       * building a list of triplets that represent triangles. */\n      for(i = open.length; i--; )\n        closed.push(open[i]);\n      open.length = 0;\n\n      for(i = closed.length; i--; )\n        if(closed[i].i < n && closed[i].j < n && closed[i].k < n)\n          open.push(closed[i].i, closed[i].j, closed[i].k);\n\n      /* Yay, we're done! */\n      return open;\n    },\n    contains: function(tri, p) {\n      /* Bounding box test first, for quick rejections. */\n      if((p[0] < tri[0][0] && p[0] < tri[1][0] && p[0] < tri[2][0]) ||\n         (p[0] > tri[0][0] && p[0] > tri[1][0] && p[0] > tri[2][0]) ||\n         (p[1] < tri[0][1] && p[1] < tri[1][1] && p[1] < tri[2][1]) ||\n         (p[1] > tri[0][1] && p[1] > tri[1][1] && p[1] > tri[2][1]))\n        return null;\n\n      var a = tri[1][0] - tri[0][0],\n          b = tri[2][0] - tri[0][0],\n          c = tri[1][1] - tri[0][1],\n          d = tri[2][1] - tri[0][1],\n          i = a * d - b * c;\n\n      /* Degenerate tri. */\n      if(i === 0.0)\n        return null;\n\n      var u = (d * (p[0] - tri[0][0]) - b * (p[1] - tri[0][1])) / i,\n          v = (a * (p[1] - tri[0][1]) - c * (p[0] - tri[0][0])) / i;\n\n      /* If we're outside the tri, fail. */\n      if(u < 0.0 || v < 0.0 || (u + v) > 1.0)\n        return null;\n\n      return [u, v];\n    }\n  };\n\n  if(true)\n    module.exports = Delaunay;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/delaunay-fast/delaunay.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./src/background.js":
/*!***************************!*\
  !*** ./src/background.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("/**\n * Stars\n * Inspired by Steve Courtney's poster art for Celsius GS's Drifter - http://celsiusgs.com/drifter/posters.php\n * by Cory Hughart - http://coryhughart.com\n */ // Settings\nvar particleCount = 40, flareCount = 10, motion = 0.05, tilt = 0.05, color = '#FFEED4', particleSizeBase = 1, particleSizeMultiplier = 0.5, flareSizeBase = 100, flareSizeMultiplier = 100, lineWidth = 1, linkChance = 75, linkLengthMin = 5, linkLengthMax = 7, linkOpacity = 0.25; // number between 0 & 1\nlinkFade = 90, linkSpeed = 1, glareAngle = -60, glareOpacityMultiplier = 0.05, renderParticles = true, renderParticleGlare = true, renderFlares = true, renderLinks = true, renderMesh = false, flicker = true, flickerSmoothing = 15, blurSize = 0, orbitTilt = true, randomMotion = true, noiseLength = 1000, noiseStrength = 1;\nvar canvas = document.getElementById('stars'), //orbits = document.getElementById('orbits'),\ncontext = canvas.getContext('2d'), mouse = {\n    x: 0,\n    y: 0\n}, m = {}, r = 0, c = 1000, n = 0, nAngle = Math.PI * 2 / noiseLength, nRad = 100, nScale = 0.5, nPos = {\n    x: 0,\n    y: 0\n}, points = [], vertices = [], triangles = [], links = [], particles = [], flares = [];\nfunction init() {\n    var i, j, k;\n    // requestAnimFrame polyfill\n    window.requestAnimFrame = function() {\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback) {\n            window.setTimeout(callback, 1000 / 60);\n        };\n    }();\n    // Fade in background\n    /*\n    var background = document.getElementById('background'),\n      bgImg = new Image(),\n      bgURL = '/img/background.jpg';\n    bgImg.onload = function() {\n      //console.log('background loaded');\n      background.style.backgroundImage = 'url(\"'+bgURL+'\")';\n      background.className += ' loaded';\n    }\n    bgImg.src = bgURL;\n    */ // Size canvas\n    resize();\n    mouse.x = canvas.clientWidth / 2;\n    mouse.y = canvas.clientHeight / 2;\n    // Create particle positions\n    for(i = 0; i < particleCount; i++){\n        var p = new Particle();\n        particles.push(p);\n        points.push([\n            p.x * c,\n            p.y * c\n        ]);\n    }\n    //console.log(JSON.stringify(points));\n    // Delaunay triangulation\n    var Delaunay = __webpack_require__(/*! delaunay-fast */ \"(pages-dir-browser)/./node_modules/delaunay-fast/delaunay.js\");\n    vertices = Delaunay.triangulate(points);\n    //console.log(JSON.stringify(vertices));\n    // Create an array of \"triangles\" (groups of 3 indices)\n    var tri = [];\n    for(i = 0; i < vertices.length; i++){\n        if (tri.length == 3) {\n            triangles.push(tri);\n            tri = [];\n        }\n        tri.push(vertices[i]);\n    }\n    //console.log(JSON.stringify(triangles));\n    // Tell all the particles who their neighbors are\n    for(i = 0; i < particles.length; i++){\n        // Loop through all tirangles\n        for(j = 0; j < triangles.length; j++){\n            // Check if this particle's index is in this triangle\n            k = triangles[j].indexOf(i);\n            // If it is, add its neighbors to the particles contacts list\n            if (k !== -1) {\n                triangles[j].forEach(function(value, index, array) {\n                    if (value !== i && particles[i].neighbors.indexOf(value) == -1) {\n                        particles[i].neighbors.push(value);\n                    }\n                });\n            }\n        }\n    }\n    //console.log(JSON.stringify(particles));\n    if (renderFlares) {\n        // Create flare positions\n        for(i = 0; i < flareCount; i++){\n            flares.push(new Flare());\n        }\n    }\n    // Motion mode\n    //if (Modernizr && Modernizr.deviceorientation) {\n    if ('ontouchstart' in document.documentElement && window.DeviceOrientationEvent) {\n        console.log('Using device orientation');\n        window.addEventListener('deviceorientation', function(e) {\n            mouse.x = canvas.clientWidth / 2 - e.gamma / 90 * (canvas.clientWidth / 2) * 2;\n            mouse.y = canvas.clientHeight / 2 - e.beta / 90 * (canvas.clientHeight / 2) * 2;\n        //console.log('Center: x:'+(canvas.clientWidth/2)+' y:'+(canvas.clientHeight/2));\n        //console.log('Orientation: x:'+mouse.x+' ('+e.gamma+') y:'+mouse.y+' ('+e.beta+')');\n        }, true);\n    } else {\n        // Mouse move listener\n        console.log('Using mouse movement');\n        document.body.addEventListener('mousemove', function(e) {\n            //console.log('moved');\n            mouse.x = e.clientX;\n            mouse.y = e.clientY;\n        });\n    }\n    // Random motion\n    if (randomMotion) {\n    //var SimplexNoise = require('simplex-noise');\n    //var simplex = new SimplexNoise();\n    }\n    // Animation loop\n    (function animloop() {\n        requestAnimFrame(animloop);\n        resize();\n        render();\n    })();\n}\nfunction render() {\n    if (randomMotion) {\n        n++;\n        if (n >= noiseLength) {\n            n = 0;\n        }\n        nPos = noisePoint(n);\n    //console.log('NOISE x:'+nPos.x+' y:'+nPos.y);\n    }\n    // Clear\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (blurSize > 0) {\n        context.shadowBlur = blurSize;\n        context.shadowColor = color;\n    }\n    if (renderParticles) {\n        // Render particles\n        for(var i = 0; i < particleCount; i++){\n            particles[i].render();\n        }\n    }\n    if (renderMesh) {\n        // Render all lines\n        context.beginPath();\n        for(var v = 0; v < vertices.length - 1; v++){\n            // Splits the array into triplets\n            if ((v + 1) % 3 === 0) {\n                continue;\n            }\n            var p1 = particles[vertices[v]], p2 = particles[vertices[v + 1]];\n            //console.log('Line: '+p1.x+','+p1.y+'->'+p2.x+','+p2.y);\n            var pos1 = position(p1.x, p1.y, p1.z), pos2 = position(p2.x, p2.y, p2.z);\n            context.moveTo(pos1.x, pos1.y);\n            context.lineTo(pos2.x, pos2.y);\n        }\n        context.strokeStyle = color;\n        context.lineWidth = lineWidth;\n        context.stroke();\n        context.closePath();\n    }\n    if (renderLinks) {\n        // Possibly start a new link\n        if (random(0, linkChance) == linkChance) {\n            var length = random(linkLengthMin, linkLengthMax);\n            var start = random(0, particles.length - 1);\n            startLink(start, length);\n        }\n        // Render existing links\n        // Iterate in reverse so that removing items doesn't affect the loop\n        for(var l = links.length - 1; l >= 0; l--){\n            if (links[l] && !links[l].finished) {\n                links[l].render();\n            } else {\n                delete links[l];\n            }\n        }\n    }\n    if (renderFlares) {\n        // Render flares\n        for(var j = 0; j < flareCount; j++){\n            flares[j].render();\n        }\n    }\n/*\n    if (orbitTilt) {\n      var tiltX = -(((canvas.clientWidth / 2) - mouse.x + ((nPos.x - 0.5) * noiseStrength)) * tilt),\n        tiltY = (((canvas.clientHeight / 2) - mouse.y + ((nPos.y - 0.5) * noiseStrength)) * tilt);\n\n      orbits.style.transform = 'rotateY('+tiltX+'deg) rotateX('+tiltY+'deg)';\n    }\n    */ }\nfunction resize() {\n    canvas.width = window.innerWidth * (window.devicePixelRatio || 1);\n    canvas.height = canvas.width * (canvas.clientHeight / canvas.clientWidth);\n}\nfunction startLink(vertex, length) {\n    //console.log('LINK from '+vertex+' (length '+length+')');\n    links.push(new Link(vertex, length));\n}\n// Particle class\nvar Particle = function() {\n    this.x = random(-0.1, 1.1, true);\n    this.y = random(-0.1, 1.1, true);\n    this.z = random(0, 4);\n    this.color = color;\n    this.opacity = random(0.1, 1, true);\n    this.flicker = 0;\n    this.neighbors = []; // placeholder for neighbors\n};\n_c = Particle;\nParticle.prototype.render = function() {\n    var pos = position(this.x, this.y, this.z), r = (this.z * particleSizeMultiplier + particleSizeBase) * (sizeRatio() / 1000), o = this.opacity;\n    if (flicker) {\n        var newVal = random(-0.5, 0.5, true);\n        this.flicker += (newVal - this.flicker) / flickerSmoothing;\n        if (this.flicker > 0.5) this.flicker = 0.5;\n        if (this.flicker < -0.5) this.flicker = -0.5;\n        o += this.flicker;\n        if (o > 1) o = 1;\n        if (o < 0) o = 0;\n    }\n    context.fillStyle = this.color;\n    context.globalAlpha = o;\n    context.beginPath();\n    context.arc(pos.x, pos.y, r, 0, 2 * Math.PI, false);\n    context.fill();\n    context.closePath();\n    if (renderParticleGlare) {\n        context.globalAlpha = o * glareOpacityMultiplier;\n        /*\n        context.ellipse(pos.x, pos.y, r * 30, r, 90 * (Math.PI / 180), 0, 2 * Math.PI, false);\n        context.fill();\n        context.closePath();\n        */ context.ellipse(pos.x, pos.y, r * 100, r, (glareAngle - (nPos.x - 0.5) * noiseStrength * motion) * (Math.PI / 180), 0, 2 * Math.PI, false);\n        context.fill();\n        context.closePath();\n    }\n    context.globalAlpha = 1;\n};\n// Flare class\nvar Flare = function() {\n    this.x = random(-0.25, 1.25, true);\n    this.y = random(-0.25, 1.25, true);\n    this.z = random(0, 2);\n    this.color = color;\n    this.opacity = random(0.001, 0.01, true);\n};\n_c1 = Flare;\nFlare.prototype.render = function() {\n    var pos = position(this.x, this.y, this.z), r = (this.z * flareSizeMultiplier + flareSizeBase) * (sizeRatio() / 1000);\n    // Feathered circles\n    /*\n    var grad = context.createRadialGradient(x+r,y+r,0,x+r,y+r,r);\n    grad.addColorStop(0, 'rgba(255,255,255,'+f.o+')');\n    grad.addColorStop(0.8, 'rgba(255,255,255,'+f.o+')');\n    grad.addColorStop(1, 'rgba(255,255,255,0)');\n    context.fillStyle = grad;\n    context.beginPath();\n    context.fillRect(x, y, r*2, r*2);\n    context.closePath();\n    */ context.beginPath();\n    context.globalAlpha = this.opacity;\n    context.arc(pos.x, pos.y, r, 0, 2 * Math.PI, false);\n    context.fillStyle = this.color;\n    context.fill();\n    context.closePath();\n    context.globalAlpha = 1;\n};\n// Link class\nvar Link = function(startVertex, numPoints) {\n    this.length = numPoints;\n    this.verts = [\n        startVertex\n    ];\n    this.stage = 0;\n    this.linked = [\n        startVertex\n    ];\n    this.distances = [];\n    this.traveled = 0;\n    this.fade = 0;\n    this.finished = false;\n};\n_c2 = Link;\nLink.prototype.render = function() {\n    // Stages:\n    // 0. Vertex collection\n    // 1. Render line reaching from vertex to vertex\n    // 2. Fade out\n    // 3. Finished (delete me)\n    var i, p, pos, points;\n    switch(this.stage){\n        // VERTEX COLLECTION STAGE\n        case 0:\n            // Grab the last member of the link\n            var last = particles[this.verts[this.verts.length - 1]];\n            //console.log(JSON.stringify(last));\n            if (last && last.neighbors && last.neighbors.length > 0) {\n                // Grab a random neighbor\n                var neighbor = last.neighbors[random(0, last.neighbors.length - 1)];\n                // If we haven't seen that particle before, add it to the link\n                if (this.verts.indexOf(neighbor) == -1) {\n                    this.verts.push(neighbor);\n                }\n            // If we have seen that particle before, we'll just wait for the next frame\n            } else {\n                //console.log(this.verts[0]+' prematurely moving to stage 3 (0)');\n                this.stage = 3;\n                this.finished = true;\n            }\n            if (this.verts.length >= this.length) {\n                // Calculate all distances at once\n                for(i = 0; i < this.verts.length - 1; i++){\n                    var p1 = particles[this.verts[i]], p2 = particles[this.verts[i + 1]], dx = p1.x - p2.x, dy = p1.y - p2.y, dist = Math.sqrt(dx * dx + dy * dy);\n                    this.distances.push(dist);\n                }\n                //console.log('Distances: '+JSON.stringify(this.distances));\n                //console.log('verts: '+this.verts.length+' distances: '+this.distances.length);\n                //console.log(this.verts[0]+' moving to stage 1');\n                this.stage = 1;\n            }\n            break;\n        // RENDER LINE ANIMATION STAGE\n        case 1:\n            if (this.distances.length > 0) {\n                points = [];\n                //var a = 1;\n                // Gather all points already linked\n                for(i = 0; i < this.linked.length; i++){\n                    p = particles[this.linked[i]];\n                    pos = position(p.x, p.y, p.z);\n                    points.push([\n                        pos.x,\n                        pos.y\n                    ]);\n                }\n                var linkSpeedRel = linkSpeed * 0.00001 * canvas.width;\n                this.traveled += linkSpeedRel;\n                var d = this.distances[this.linked.length - 1];\n                // Calculate last point based on linkSpeed and distance travelled to next point\n                if (this.traveled >= d) {\n                    this.traveled = 0;\n                    // We've reached the next point, add coordinates to array\n                    //console.log(this.verts[0]+' reached vertex '+(this.linked.length+1)+' of '+this.verts.length);\n                    this.linked.push(this.verts[this.linked.length]);\n                    p = particles[this.linked[this.linked.length - 1]];\n                    pos = position(p.x, p.y, p.z);\n                    points.push([\n                        pos.x,\n                        pos.y\n                    ]);\n                    if (this.linked.length >= this.verts.length) {\n                        //console.log(this.verts[0]+' moving to stage 2 (1)');\n                        this.stage = 2;\n                    }\n                } else {\n                    // We're still travelling to the next point, get coordinates at travel distance\n                    // http://math.stackexchange.com/a/85582\n                    var a = particles[this.linked[this.linked.length - 1]], b = particles[this.verts[this.linked.length]], t = d - this.traveled, x = (this.traveled * b.x + t * a.x) / d, y = (this.traveled * b.y + t * a.y) / d, z = (this.traveled * b.z + t * a.z) / d;\n                    pos = position(x, y, z);\n                    //console.log(this.verts[0]+' traveling to vertex '+(this.linked.length+1)+' of '+this.verts.length+' ('+this.traveled+' of '+this.distances[this.linked.length]+')');\n                    points.push([\n                        pos.x,\n                        pos.y\n                    ]);\n                }\n                this.drawLine(points);\n            } else {\n                //console.log(this.verts[0]+' prematurely moving to stage 3 (1)');\n                this.stage = 3;\n                this.finished = true;\n            }\n            break;\n        // FADE OUT STAGE\n        case 2:\n            if (this.verts.length > 1) {\n                if (this.fade < linkFade) {\n                    this.fade++;\n                    // Render full link between all vertices and fade over time\n                    points = [];\n                    var alpha = (1 - this.fade / linkFade) * linkOpacity;\n                    for(i = 0; i < this.verts.length; i++){\n                        p = particles[this.verts[i]];\n                        pos = position(p.x, p.y, p.z);\n                        points.push([\n                            pos.x,\n                            pos.y\n                        ]);\n                    }\n                    this.drawLine(points, alpha);\n                } else {\n                    //console.log(this.verts[0]+' moving to stage 3 (2a)');\n                    this.stage = 3;\n                    this.finished = true;\n                }\n            } else {\n                //console.log(this.verts[0]+' prematurely moving to stage 3 (2b)');\n                this.stage = 3;\n                this.finished = true;\n            }\n            break;\n        // FINISHED STAGE\n        case 3:\n        default:\n            this.finished = true;\n            break;\n    }\n};\nLink.prototype.drawLine = function(points, alpha) {\n    if (typeof alpha !== 'number') alpha = linkOpacity;\n    if (points.length > 1 && alpha > 0) {\n        //console.log(this.verts[0]+': Drawing line '+alpha);\n        context.globalAlpha = alpha;\n        context.beginPath();\n        for(var i = 0; i < points.length - 1; i++){\n            context.moveTo(points[i][0], points[i][1]);\n            context.lineTo(points[i + 1][0], points[i + 1][1]);\n        }\n        context.strokeStyle = color;\n        context.lineWidth = lineWidth;\n        context.stroke();\n        context.closePath();\n        context.globalAlpha = 1;\n    }\n};\n// Utils\nfunction noisePoint(i) {\n    var a = nAngle * i, cosA = Math.cos(a), sinA = Math.sin(a), //value = simplex.noise2D(nScale * cosA + nScale, nScale * sinA + nScale),\n    //rad = nRad + value;\n    rad = nRad;\n    return {\n        x: rad * cosA,\n        y: rad * sinA\n    };\n}\nfunction position(x, y, z) {\n    return {\n        x: x * canvas.width + (canvas.width / 2 - mouse.x + (nPos.x - 0.5) * noiseStrength) * z * motion,\n        y: y * canvas.height + (canvas.height / 2 - mouse.y + (nPos.y - 0.5) * noiseStrength) * z * motion\n    };\n}\nfunction sizeRatio() {\n    return canvas.width >= canvas.height ? canvas.width : canvas.height;\n}\nfunction random(min, max, float) {\n    return float ? Math.random() * (max - min) + min : Math.floor(Math.random() * (max - min + 1)) + min;\n}\n// init\nif (canvas) init();\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"Particle\");\n$RefreshReg$(_c1, \"Flare\");\n$RefreshReg$(_c2, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/background.js\n"));

/***/ })

}]);